/*
 * API Resource Function Provisioning and Lifecycle Management
 * API to provision,manage lifecyle of, configure and activate Resource Functions (Network Services in ETSI terminology that could be composed from physical or virtual network functions)
 *
 * OpenAPI spec version: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.tmf.dsmapi.resourceFunction.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.tmf.dsmapi.resourceFunction.model.MigrateLocation;
import org.tmf.dsmapi.resourceFunction.model.NameValuePair;
import org.tmf.dsmapi.resourceFunction.model.SAPRef;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

/**
 * Task resource used to request migration of the Resource Function
 */
@ApiModel(description = "Task resource used to request migration of the Resource Function")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-06-15T01:04:08.127Z")
@Entity
public class Migrate   {
   
     @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("href")
  private String href = null;

  /**
   * Sub-state required before migrate is carried out
   */
  public enum AdminStateModificationEnum {
    LOCKED("locked"),
    
    UNLOCKED("unlocked"),
    
    SHUTTINGDOWN("shuttingDown");

    private String value;

    AdminStateModificationEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AdminStateModificationEnum fromValue(String text) {
      for (AdminStateModificationEnum b : AdminStateModificationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("adminStateModification")
  private AdminStateModificationEnum adminStateModification = null;

  @JsonProperty("sapsToRemove")
  private List<SAPRef> sapsToRemove = new ArrayList<SAPRef>();

  @JsonProperty("sapsToAdd")
  private List<SAPRef> sapsToAdd = new ArrayList<SAPRef>();

  @JsonProperty("priority")
  private Long priority = null;

  @JsonProperty("startTime")
  private String startTime = null;

  /**
   * In what mode is the migrate operation to be performed
   */
  public enum CompletionModeEnum {
    BESTEFFORT("bestEffort"),
    
    ATOMIC("atomic");

    private String value;

    CompletionModeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CompletionModeEnum fromValue(String text) {
      for (CompletionModeEnum b : CompletionModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("completionMode")
  private CompletionModeEnum completionMode = null;

  @JsonProperty("location")
  private MigrateLocation location = null;

  @JsonProperty("characteristics")
  private List<NameValuePair> characteristics = new ArrayList<NameValuePair>();

  /**
   * Gets or Sets migrateStatus
   */
  public enum MigrateStatusEnum {
    IN_PROGRESS("In Progress"),
    
    PAUSED_CONSUMER_INPUT_REQUIRED("Paused - Consumer Input Required"),
    
    PAUSED_MANUAL_INTERVENTION_REQUIRED("Paused - Manual Intervention Required");

    private String value;

    MigrateStatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MigrateStatusEnum fromValue(String text) {
      for (MigrateStatusEnum b : MigrateStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("migrateStatus")
  private MigrateStatusEnum migrateStatus = null;

  public Migrate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier of the Migrate task resource. Required to be unique. Used in URIs as the identifier of the Migrate task resource
   * @return id
  **/
  @ApiModelProperty(example = "80987", value = "Identifier of the Migrate task resource. Required to be unique. Used in URIs as the identifier of the Migrate task resource")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Migrate href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Reference to the Resource Function that needs to be migrated
   * @return href
  **/
  @ApiModelProperty(example = "http://serverlocation:port/resourceFunction/17898", required = true, value = "Reference to the Resource Function that needs to be migrated")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public Migrate adminStateModification(AdminStateModificationEnum adminStateModification) {
    this.adminStateModification = adminStateModification;
    return this;
  }

   /**
   * Sub-state required before migrate is carried out
   * @return adminStateModification
  **/
  @ApiModelProperty(value = "Sub-state required before migrate is carried out")
  public AdminStateModificationEnum getAdminStateModification() {
    return adminStateModification;
  }

  public void setAdminStateModification(AdminStateModificationEnum adminStateModification) {
    this.adminStateModification = adminStateModification;
  }

  public Migrate sapsToRemove(List<SAPRef> sapsToRemove) {
    this.sapsToRemove = sapsToRemove;
    return this;
  }

  public Migrate addSapsToRemoveItem(SAPRef sapsToRemoveItem) {
    this.sapsToRemove.add(sapsToRemoveItem);
    return this;
  }

   /**
   * Service Access Points that need to be removed when service is migrated
   * @return sapsToRemove
  **/
  @ApiModelProperty(value = "Service Access Points that need to be removed when service is migrated")
  public List<SAPRef> getSapsToRemove() {
    return sapsToRemove;
  }

  public void setSapsToRemove(List<SAPRef> sapsToRemove) {
    this.sapsToRemove = sapsToRemove;
  }

  public Migrate sapsToAdd(List<SAPRef> sapsToAdd) {
    this.sapsToAdd = sapsToAdd;
    return this;
  }

  public Migrate addSapsToAddItem(SAPRef sapsToAddItem) {
    this.sapsToAdd.add(sapsToAddItem);
    return this;
  }

   /**
   * Service Access Points that need to be added when service is migrated
   * @return sapsToAdd
  **/
  @ApiModelProperty(value = "Service Access Points that need to be added when service is migrated")
  public List<SAPRef> getSapsToAdd() {
    return sapsToAdd;
  }

  public void setSapsToAdd(List<SAPRef> sapsToAdd) {
    this.sapsToAdd = sapsToAdd;
  }

  public Migrate priority(Long priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Priority of the migrate operation
   * @return priority
  **/
  @ApiModelProperty(example = "1", value = "Priority of the migrate operation")
  public Long getPriority() {
    return priority;
  }

  public void setPriority(Long priority) {
    this.priority = priority;
  }

  public Migrate startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The time when the Migrate action needs to commence. This allows a delay to be added
   * @return startTime
  **/
  @ApiModelProperty(example = "2017:11:7:15:53:10Z", value = "The time when the Migrate action needs to commence. This allows a delay to be added")
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public Migrate completionMode(CompletionModeEnum completionMode) {
    this.completionMode = completionMode;
    return this;
  }

   /**
   * In what mode is the migrate operation to be performed
   * @return completionMode
  **/
  @ApiModelProperty(value = "In what mode is the migrate operation to be performed")
  public CompletionModeEnum getCompletionMode() {
    return completionMode;
  }

  public void setCompletionMode(CompletionModeEnum completionMode) {
    this.completionMode = completionMode;
  }

  public Migrate location(MigrateLocation location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public MigrateLocation getLocation() {
    return location;
  }

  public void setLocation(MigrateLocation location) {
    this.location = location;
  }

  public Migrate characteristics(List<NameValuePair> characteristics) {
    this.characteristics = characteristics;
    return this;
  }

  public Migrate addCharacteristicsItem(NameValuePair characteristicsItem) {
    this.characteristics.add(characteristicsItem);
    return this;
  }

   /**
   * Additional attributes to pass to the migrate operation
   * @return characteristics
  **/
  @ApiModelProperty(value = "Additional attributes to pass to the migrate operation")
  public List<NameValuePair> getCharacteristics() {
    return characteristics;
  }

  public void setCharacteristics(List<NameValuePair> characteristics) {
    this.characteristics = characteristics;
  }

  public Migrate migrateStatus(MigrateStatusEnum migrateStatus) {
    this.migrateStatus = migrateStatus;
    return this;
  }

   /**
   * Get migrateStatus
   * @return migrateStatus
  **/
  @ApiModelProperty(value = "")
  public MigrateStatusEnum getMigrateStatus() {
    return migrateStatus;
  }

  public void setMigrateStatus(MigrateStatusEnum migrateStatus) {
    this.migrateStatus = migrateStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Migrate migrate = (Migrate) o;
    return Objects.equals(this.id, migrate.id) &&
        Objects.equals(this.href, migrate.href) &&
        Objects.equals(this.adminStateModification, migrate.adminStateModification) &&
        Objects.equals(this.sapsToRemove, migrate.sapsToRemove) &&
        Objects.equals(this.sapsToAdd, migrate.sapsToAdd) &&
        Objects.equals(this.priority, migrate.priority) &&
        Objects.equals(this.startTime, migrate.startTime) &&
        Objects.equals(this.completionMode, migrate.completionMode) &&
        Objects.equals(this.location, migrate.location) &&
        Objects.equals(this.characteristics, migrate.characteristics) &&
        Objects.equals(this.migrateStatus, migrate.migrateStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, href, adminStateModification, sapsToRemove, sapsToAdd, priority, startTime, completionMode, location, characteristics, migrateStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Migrate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    adminStateModification: ").append(toIndentedString(adminStateModification)).append("\n");
    sb.append("    sapsToRemove: ").append(toIndentedString(sapsToRemove)).append("\n");
    sb.append("    sapsToAdd: ").append(toIndentedString(sapsToAdd)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    completionMode: ").append(toIndentedString(completionMode)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    characteristics: ").append(toIndentedString(characteristics)).append("\n");
    sb.append("    migrateStatus: ").append(toIndentedString(migrateStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

